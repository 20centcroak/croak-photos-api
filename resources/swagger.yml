swagger: "2.0"
info:
  description: "Croak photo API server.  You can find out more about     Croak photo at [croak photos on github](https://github.com/20centcroak/croak-photos-api) or at [photos.croak.fr](https://photos.croak.fr/)."
  version: "1.0.0"
  title: "Croak photos API"
  license:
    name: "GPL 3.0"
    url: "https://www.gnu.org/licenses/gpl.html"
host: "photos-api.croak.fr"
basePath: "/v1"
tags:
- name: "collections"
  description: "Manage photo collections"
- name: "pictures"
  description: "Manage pictures"
- name: "user"
  description: "Operations about user"
schemes:
- "https"

paths:
  /{user}/collections:
    parameters:
      - $ref: '#/parameters/user'
    
    get:
      tags:
      - "collections"
      summary: "get collections"
      description: "get all collections for the given user."
      operationId: "getCollections"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Collections"
          
  /{user}/collection:
    parameters:
      - $ref: '#/parameters/user'
      - $ref: '#/parameters/collectionName'
    
    get:
      tags:
      - "collections"
      summary: "get collection"
      description: "get collection for the given collection name."
      operationId: "getCollection"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Collection"
    
    post:
      tags:
      - "collections"
      summary: "create a new collection"
      description: "define a new collection by setting explicitly the image files composing this collection"
      operationId: "createCollection"
      consumes:
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "list of image names"
        required: true
        schema:
          $ref: "#/definitions/Collection"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid Collection"
            
  /{user}/collectionDefinition:
    parameters:
      - $ref: '#/parameters/user'
      - $ref: '#/parameters/collectionName'
    
    get:
      tags:
      - "collections"
      summary: "get collection definition"
      description: "get collection definition for the given collection name."
      operationId: "getCollectionDefinition"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CollectionDefinition"
            
    post:
      tags:
      - "collections"
      summary: "create a new collection based on metadata"
      description: "define a new collection thanks to conditions on metadata of images"
      operationId: "createMetadataCollection"
      consumes:
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "collection definition"
        required: true
        schema:
          $ref: "#/definitions/CollectionDefinition"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid Collection Definition"
          
  /{user}/picture:
    parameters: 
      - $ref: '#/parameters/user'

    post:
      summary: "add an image in the catalog"
      description: "add a new image"
      tags:
      - "pictures"
      consumes:
         - multipart/form-data
      parameters:
        - in: formData
          name: upfile
          type: file
          required: true
          description: The file to upload.
        - in: formData
          name: note
          type: string
          required: false
          description: Description of file contents.
      responses:
        200:
          description: OK
        400:
          description: invalid image
          
  /{user}/{picture}:
    parameters: 
      - $ref: '#/parameters/user'
      - in: path
        name: picture
        type: string
        required: true
        description: name of file name
    
    get:
      summary: get a single image
      description: get the mentionned image
      tags:
      - "pictures"
      produces:
        - image/png
        - image/gif
        - image/jpeg
        - image/tiff
      responses:
        200:
          description: OK
    
        
    


parameters:
  user:
    in: path
    name: user
    type: string
    required: true
    description: unique user name

    
  collectionName:
    in: query
    name: collectionName
    type: string
    required: true
    description: collection name

    
definitions:

  Collections:
    type: array
    items: 
      type: string
      example:
        - week end in Paris
        - holidays in Ireland
        - kids
  
  Collection:
    type: array
    items:
      type: string
      example:
        - paris.jpg
        - DCI2473.jpg
  
      
  CollectionDefinition:
    type: object
    description: a definition that groups items together
    properties:
      title: 
        type: string
        example: "my hollidays in Sweden"
      description: 
        type: string
        example: "family trip in August 2018"
      comments: 
        type: string
        example: "sunny hollidays we enjoyed"
      coverImageUrl: 
        type: string
        example: "SwedenFlag.jpg"
      condition:
        $ref: "#/definitions/CollectionCondition"
        
  CollectionCondition:
    type: object
    description: "define a boolean condition associated with a logical operation using metadata fields and associated target values, see [documentation](https://github.com/20centcroak/croak-photos-api/blob/master/resources/collectionConditionSyntax.md):  "
    properties:
      condition:
        type: string
        example: '[date > "25/05/2018"] & [date < "31/12/2018"] & [keyword = ("hollidays" | "christmas")]'
